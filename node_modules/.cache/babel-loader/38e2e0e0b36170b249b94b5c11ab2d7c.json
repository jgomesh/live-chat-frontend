{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n    console.log(privateChats);\n  }, [userData]);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.has(payloadData.senderName)) {\n          const updatedPrivateChats = new Map(privateChats);\n          let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n          let updatedMessages = existingMessages ? existingMessages.concat(payloadData) : [payloadData];\n          updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n          setPrivateChats(updatedPrivateChats);\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    let updatedPrivateChats = new Map(privateChats);\n\n    if (updatedPrivateChats.has(payloadData.senderName)) {\n      let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n      let updatedMessages = existingMessages.concat(payloadData);\n      updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      setPrivateChats(updatedPrivateChats);\n    }\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const transformArrayToMap = array => {\n    const map = new Map();\n    array.forEach(item => {\n      const key = item.senderName !== userData.username ? item.senderName : item.chatId;\n      const value = {\n        id: item.id,\n        senderName: item.senderName,\n        recieverName: item.chatId,\n        message: item.message,\n        status: \"MESSAGE\"\n      };\n\n      if (!map.has(key)) {\n        map.set(key, []);\n      }\n\n      map.get(key).push(value);\n    });\n    return map;\n  };\n\n  const registerUser = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", {\n        name: userData.username\n      }, config);\n      const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n      const privateResponse = await axios.get(\"http://localhost:8080/messages/private/\" + userData.username, config);\n      const publicChatData = publicResponse.data.map(publicMessage => ({ ...publicMessage,\n        status: \"MESSAGE\",\n        receiverName: null\n      }));\n      const privateChatData = privateResponse.data;\n      const MapPrivateChat = transformArrayToMap(privateChatData);\n      setPublicChats(publicChatData);\n      setPrivateChats(MapPrivateChat);\n      connect();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 34\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"RTXibMkTioQUd0iwG0mBbBior6c=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","axios","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","connect","Sock","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","has","updatedPrivateChats","existingMessages","get","updatedMessages","concat","set","prevChats","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","push","handleUsername","transformArrayToMap","array","map","forEach","item","key","chatId","id","recieverName","registerUser","config","headers","registerResponse","post","name","publicResponse","privateResponse","publicChatData","data","publicMessage","privateChatData","MapPrivateChat","error","keys","index","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {over} from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios'\n\nlet stompClient;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());     \n    const [publicChats, setPublicChats] = useState([]); \n    const [tab,setTab] =useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n      });\n    useEffect(() => {\n      console.log(userData);\n      console.log(privateChats);\n    }, [userData]);\n    const connect =()=>{\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({},onConnected, onError);\n    }\n\n    const onConnected = () => {\n        setUserData({...userData,\"connected\": true});\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n        userJoin();\n    }\n\n    const userJoin=()=>{\n          let chatMessage = {\n            senderName: userData.username,\n            status:\"JOIN\"\n          };\n          stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n    const onMessageReceived = (payload) => {\n        let payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case \"JOIN\":\n                if (!privateChats.has(payloadData.senderName)) {\n                    const updatedPrivateChats = new Map(privateChats);\n                    let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n                    let updatedMessages = existingMessages ? existingMessages.concat(payloadData) : [payloadData];\n                    updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n                    setPrivateChats(updatedPrivateChats);\n                }\n                break;\n            case \"MESSAGE\":\n                setPublicChats((prevChats) => [...prevChats, payloadData]);\n                break;\n        }\n    };\n    \n    const onPrivateMessage = (payload) => {\n        let payloadData = JSON.parse(payload.body);\n        let updatedPrivateChats = new Map(privateChats); \n        \n        if (updatedPrivateChats.has(payloadData.senderName)) {\n          let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n          let updatedMessages = existingMessages.concat(payloadData);\n          updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n          setPrivateChats(updatedPrivateChats);\n        } \n        \n      }\n      \n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n            if (stompClient) {\n              let chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n              };\n              console.log(chatMessage);\n              stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n              setUserData({...userData,\"message\": \"\"});\n            }\n    }\n\n    const sendPrivateValue=()=>{\n        if (stompClient) {\n          let chatMessage = {\n            senderName: userData.username,\n            receiverName:tab,\n            message: userData.message,\n            status:\"MESSAGE\"\n          };\n          \n          if(userData.username !== tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n          }\n          stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n          setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const handleUsername=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\": value});\n    }\n    const transformArrayToMap = (array) => {\n        const map = new Map();\n        array.forEach((item) => {\n          const key = item.senderName !== userData.username ? item.senderName : item.chatId;\n          const value = {\n            id: item.id,\n            senderName: item.senderName,\n            recieverName: item.chatId,\n            message: item.message,\n            status: \"MESSAGE\",\n          };\n      \n          if (!map.has(key)) {\n            map.set(key, []);\n          }\n      \n          map.get(key).push(value);\n        });\n      \n        return map;\n      };\n      \n    const registerUser = async () => {\n        try {\n            const config = {\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n                }\n              };\n            const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", { name: userData.username }, config);\n            const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n            const privateResponse = await axios.get(\"http://localhost:8080/messages/private/\" + userData.username, config);\n            const publicChatData = publicResponse.data.map((publicMessage) => ({...publicMessage, status: \"MESSAGE\", receiverName: null}));\n            const privateChatData = privateResponse.data;\n\n            const MapPrivateChat = transformArrayToMap(privateChatData)\n            setPublicChats(publicChatData);\n            setPrivateChats(MapPrivateChat);\n            connect();\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n    return (\n    <div className=\"container\">\n        {userData.connected?\n        <div className=\"chat-box\">\n            <div className=\"member-list\">\n                <ul>\n                    <li onClick={()=>{setTab(\"CHATROOM\")}} className={`member ${tab===\"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                    {[...privateChats.keys()].map((name,index)=>(\n                        <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"}`} key={index}>{name}</li>\n                    ))}\n                </ul>\n            </div>\n            {tab===\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {publicChats.map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                </div>\n            </div>}\n            {tab!==\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {[...privateChats.get(tab)].map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\n                </div>\n            </div>}\n        </div>\n        :\n        <div className=\"register\">\n            <input\n                id=\"user-name\"\n                placeholder=\"Enter your name\"\n                name=\"userName\"\n                value={userData.username}\n                onChange={handleUsername}\n                margin=\"normal\"\n              />\n              <button type=\"button\" onClick={registerUser}>\n                    connect\n              </button> \n        </div>}\n    </div>\n    )\n}\n\nexport default ChatRoom\n"]},"metadata":{},"sourceType":"module"}