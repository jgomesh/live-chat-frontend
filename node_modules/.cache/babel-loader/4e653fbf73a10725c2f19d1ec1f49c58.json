{"ast":null,"code":"import userJoin from \"./userJoin\";\n\nconst onConnected = (setUserData, stompClient, userData, privateChats, setPrivateChats, publicChats, setPublicChats) => {\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  setUserData({ ...userData,\n    \"connected\": true\n  });\n  stompClient.subscribe('/chatroom/public', onMessageReceived);\n  stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n  userJoin(userData, stompClient);\n};\n\nexport default onConnected;","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/utils/onConnected.js"],"names":["userJoin","onConnected","setUserData","stompClient","userData","privateChats","setPrivateChats","publicChats","setPublicChats","onMessageReceived","payload","payloadData","JSON","parse","body","status","get","senderName","set","Map","push","onPrivateMessage","console","log","list","subscribe","username"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,MAAMC,WAAW,GAAG,CAClBC,WADkB,EAElBC,WAFkB,EAGlBC,QAHkB,EAIlBC,YAJkB,EAKlBC,eALkB,EAMlBC,WANkB,EAOlBC,cAPkB,KAOC;AAEnB,QAAMC,iBAAiB,GAAIC,OAAD,IAAW;AACnC,QAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACI,IAAnB,CAAlB;;AACA,YAAOH,WAAW,CAACI,MAAnB;AACI,WAAK,MAAL;AACI,YAAG,CAACV,YAAY,CAACW,GAAb,CAAiBL,WAAW,CAACM,UAA7B,CAAJ,EAA6C;AACzCZ,UAAAA,YAAY,CAACa,GAAb,CAAiBP,WAAW,CAACM,UAA7B,EAAwC,EAAxC;AACAX,UAAAA,eAAe,CAAC,IAAIa,GAAJ,CAAQd,YAAR,CAAD,CAAf;AACH;;AACD;;AACJ,WAAK,SAAL;AACIE,QAAAA,WAAW,CAACa,IAAZ,CAAiBT,WAAjB;AACAH,QAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,CAAD,CAAd;AACA;AAVR;AAYD,GAdD;;AAgBA,QAAMc,gBAAgB,GAAIX,OAAD,IAAW;AAClCY,IAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ;AACA,QAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACI,IAAnB,CAAlB;;AACA,QAAGT,YAAY,CAACW,GAAb,CAAiBL,WAAW,CAACM,UAA7B,CAAH,EAA4C;AACxCZ,MAAAA,YAAY,CAACW,GAAb,CAAiBL,WAAW,CAACM,UAA7B,EAAyCG,IAAzC,CAA8CT,WAA9C;AACAL,MAAAA,eAAe,CAAC,IAAIa,GAAJ,CAAQd,YAAR,CAAD,CAAf;AACH,KAHD,MAGK;AACD,UAAImB,IAAI,GAAE,EAAV;AACAA,MAAAA,IAAI,CAACJ,IAAL,CAAUT,WAAV;AACAN,MAAAA,YAAY,CAACa,GAAb,CAAiBP,WAAW,CAACM,UAA7B,EAAwCO,IAAxC;AACAlB,MAAAA,eAAe,CAAC,IAAIa,GAAJ,CAAQd,YAAR,CAAD,CAAf;AACH;AACF,GAZD;;AAaAH,EAAAA,WAAW,CAAC,EAAC,GAAGE,QAAJ;AAAa,iBAAa;AAA1B,GAAD,CAAX;AACAD,EAAAA,WAAW,CAACsB,SAAZ,CAAsB,kBAAtB,EAA0ChB,iBAA1C;AACAN,EAAAA,WAAW,CAACsB,SAAZ,CAAsB,WAAWrB,QAAQ,CAACsB,QAApB,GAA+B,UAArD,EAAiEL,gBAAjE;AACArB,EAAAA,QAAQ,CAACI,QAAD,EAAWD,WAAX,CAAR;AACD,CA1CD;;AA4CA,eAAeF,WAAf","sourcesContent":["import userJoin from \"./userJoin\";\n\nconst onConnected = (\n  setUserData,\n  stompClient,\n  userData,\n  privateChats,\n  setPrivateChats,\n  publicChats,\n  setPublicChats) => {\n\n  const onMessageReceived = (payload)=>{\n    var payloadData = JSON.parse(payload.body);\n    switch(payloadData.status){\n        case \"JOIN\":\n            if(!privateChats.get(payloadData.senderName)){\n                privateChats.set(payloadData.senderName,[]);\n                setPrivateChats(new Map(privateChats));\n            }\n            break;\n        case \"MESSAGE\":\n            publicChats.push(payloadData);\n            setPublicChats([...publicChats]);\n            break;\n    }\n  }\n\n  const onPrivateMessage = (payload)=>{\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n    if(privateChats.get(payloadData.senderName)){\n        privateChats.get(payloadData.senderName).push(payloadData);\n        setPrivateChats(new Map(privateChats));\n    }else{\n        let list =[];\n        list.push(payloadData);\n        privateChats.set(payloadData.senderName,list);\n        setPrivateChats(new Map(privateChats));\n    }\n  }\n  setUserData({...userData,\"connected\": true});\n  stompClient.subscribe('/chatroom/public', onMessageReceived);\n  stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n  userJoin(userData, stompClient);\n}\n\nexport default onConnected;\n"]},"metadata":{},"sourceType":"module"}