{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport getAvatarColor from '../utils/getAvatarColor';\nimport RegisterForm from './RegisterForm';\nimport handleMessage from '../utils/handleMessage';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport api_data from '../api/config';\nimport sendValue from '../utils/sendValue';\nimport FriendSearch from './FriendSearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [friendInput, setFriendInput] = useState({\n    friendName: ''\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const {\n      URL,\n      PORT\n    } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      connected: true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN'\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case 'JOIN':\n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats(prevChats => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          const updatedPrivateChats = new Map(privateChats);\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n          setPrivateChats(updatedPrivateChats);\n        }\n\n        break;\n\n      case 'MESSAGE':\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevPrivateChats => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleTabChange = newTab => {\n    setTab(newTab);\n    setAddFriendTabOpen(false);\n    scrollToBottom();\n  };\n\n  const handleSendMessage = () => {\n    if (tab === 'CHATROOM') {\n      sendValue(stompClient, userData, setUserData);\n    } else {\n      sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleTabChange('CHATROOM'),\n            className: `member ${tab === 'CHATROOM' && !addFriendTabOpen && 'active'}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleTabChange(name),\n            className: `member ${tab === name && !addFriendTabOpen && 'active'}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `member ${addFriendTabOpen && 'active'}`,\n            onClick: () => setAddFriendTabOpen(true),\n            children: \"Adicionar amigo +\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(ChatContent, {\n        chats: publicChats,\n        username: userData.username,\n        message: userData.message,\n        onMessageChange: event => handleMessage(event, userData, setUserData),\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(ChatContent, {\n        chats: privateChats.get(tab) || [],\n        username: userData.username,\n        message: userData.message,\n        onMessageChange: event => handleMessage(event, userData, setUserData),\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FriendSearch, {\n        addFriendTabOpen: addFriendTabOpen,\n        friendInput: friendInput,\n        setFriendInput: setFriendInput,\n        setPrivateChats: setPrivateChats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n      setUserData: setUserData,\n      userData: userData,\n      connectWebSocket: connectWebSocket,\n      setPublicChats: setPublicChats,\n      setPrivateChats: setPrivateChats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"YxnFtMjWqsuY4DVTJi+quF4U/Bc=\");\n\n_c = ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","scrollToBottom","getAvatarColor","RegisterForm","handleMessage","sendPrivateValue","api_data","sendValue","FriendSearch","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","friendInput","setFriendInput","friendName","addFriendTabOpen","setAddFriendTabOpen","userData","setUserData","username","receivername","connected","message","connectWebSocket","URL","PORT","socketURL","socket","connect","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","prevChats","prevPrivateChats","existingMessages","get","set","updatedPrivateChats","has","updatedMessages","concat","handleTabChange","newTab","handleSendMessage","keys","map","name","index","event"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport getAvatarColor from '../utils/getAvatarColor';\nimport RegisterForm from './RegisterForm';\nimport handleMessage from '../utils/handleMessage';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport api_data from '../api/config';\nimport sendValue from '../utils/sendValue';\nimport FriendSearch from './FriendSearch';\n\nlet stompClient;\n\nconst ChatRoom = () => {\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState('CHATROOM');\n  const [friendInput, setFriendInput] = useState({\n    friendName: '',\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: '',\n  });\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const { URL, PORT } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, connected: true });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: 'JOIN',\n    };\n    stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case 'JOIN':\n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats((prevChats) => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          const updatedPrivateChats = new Map(privateChats);\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n          setPrivateChats(updatedPrivateChats);\n        }\n        break;\n      case 'MESSAGE':\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats((prevPrivateChats) => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleTabChange = (newTab) => {\n    setTab(newTab);\n    setAddFriendTabOpen(false);\n    scrollToBottom();\n  };\n\n  const handleSendMessage = () => {\n    if (tab === 'CHATROOM') {\n      sendValue(stompClient, userData, setUserData);\n    } else {\n      sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData);\n    }\n  };\n\n  return (\n    <div>\n      {userData.connected ? (\n        <div className=\"chat-box\">\n          <div className=\"member-list\">\n            <ul>\n              <li\n                onClick={() => handleTabChange('CHATROOM')}\n                className={`member ${(tab === 'CHATROOM' && !addFriendTabOpen) && 'active'}`}\n              >\n                Chatroom\n              </li>\n              {[...privateChats.keys()].map((name, index) => (\n                <li\n                  onClick={() => handleTabChange(name)}\n                  className={`member ${(tab === name && !addFriendTabOpen) && 'active'}`}\n                  key={index}\n                >\n                  {name}\n                </li>\n              ))}\n              <li\n                className={`member ${(addFriendTabOpen) && 'active'}`}\n                onClick={() => setAddFriendTabOpen(true)}\n              >\n                Adicionar amigo +\n              </li>\n            </ul>\n          </div>\n          {tab === 'CHATROOM' && !addFriendTabOpen && (\n            <ChatContent\n              chats={publicChats}\n              username={userData.username}\n              message={userData.message}\n              onMessageChange={(event) => handleMessage(event, userData, setUserData)}\n              onSendMessage={handleSendMessage}\n            />\n          )}\n          {tab !== 'CHATROOM' && !addFriendTabOpen && (\n            <ChatContent\n              chats={privateChats.get(tab) || []}\n              username={userData.username}\n              message={userData.message}\n              onMessageChange={(event) => handleMessage(event, userData, setUserData)}\n              onSendMessage={handleSendMessage}\n            />\n          )}\n          <FriendSearch\n            addFriendTabOpen={addFriendTabOpen}\n            friendInput={friendInput}\n            setFriendInput={setFriendInput}\n            setPrivateChats={setPrivateChats}\n          />\n        </div>\n      ) : (\n        <RegisterForm\n          setUserData={setUserData}\n          userData={userData}\n          connectWebSocket={connectWebSocket}\n          setPublicChats={setPublicChats}\n          setPrivateChats={setPrivateChats}\n        />\n      )}\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}