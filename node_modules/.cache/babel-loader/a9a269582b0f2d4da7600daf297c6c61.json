{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient;\n\nconst generateRandomColor = value => {\n  const r = Math.sin(value) * 127 + 128;\n  const g = Math.sin(value + 2) * 127 + 128;\n  const b = Math.sin(value + 4) * 127 + 128;\n  return `rgb(${r.toFixed(0)}, ${g.toFixed(0)}, ${b.toFixed(0)})`;\n};\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const socketURL = 'http://localhost:8080/ws';\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        const updatedPrivateChats = new Map(privateChats);\n\n        if (!updatedPrivateChats.has(payloadData.senderName)) {\n          let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n          console.log(\"HERE\", privateChats);\n          let updatedMessages = existingMessages.concat(payloadData);\n          updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n          setPrivateChats(updatedPrivateChats);\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevPrivateChats => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const transformArrayToMap = array => {\n    const map = new Map();\n    array.forEach(item => {\n      const key = item.senderName !== userData.username ? item.senderName : item.chatId;\n      const value = {\n        id: item.id,\n        senderName: item.senderName,\n        recieverName: item.chatId,\n        message: item.message,\n        status: \"MESSAGE\"\n      };\n\n      if (!map.has(key)) {\n        map.set(key, []);\n      }\n\n      map.get(key).push(value);\n    });\n    return map;\n  };\n\n  const registerUser = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", {\n        name: userData.username\n      }, config);\n      const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n      const privateResponse = await axios.get(\"http://localhost:8080/messages/private/\" + userData.username, config);\n      const publicChatData = publicResponse.data.map(publicMessage => ({ ...publicMessage,\n        status: \"MESSAGE\",\n        receiverName: null\n      }));\n      const privateChatData = privateResponse.data;\n      const MapPrivateChat = transformArrayToMap(privateChatData);\n      setPublicChats(publicChatData);\n      setPrivateChats(MapPrivateChat);\n      connectWebSocket();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const getAvatarColor = name => {\n    const nameValue = name.split('').map(char => char.charCodeAt(0)).reduce((acc, cur) => acc + cur, 0);\n    return generateRandomColor(nameValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the messageenter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"558QssMXfTHaGM/HfNKK45zyzHg=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","axios","stompClient","generateRandomColor","value","r","Math","sin","g","b","toFixed","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","connectWebSocket","socketURL","socket","connect","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","updatedPrivateChats","has","existingMessages","get","updatedMessages","concat","set","prevChats","prevPrivateChats","handleMessage","event","target","sendValue","sendPrivateValue","receiverName","push","handleUsername","transformArrayToMap","array","map","forEach","item","key","chatId","id","recieverName","registerUser","config","headers","registerResponse","post","name","publicResponse","privateResponse","publicChatData","data","publicMessage","privateChatData","MapPrivateChat","error","getAvatarColor","nameValue","split","char","charCodeAt","reduce","acc","cur","keys","index","chat","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios';\n\nlet stompClient;\n\nconst generateRandomColor = (value) => {\n    const r = Math.sin(value) * 127 + 128;\n    const g = Math.sin(value + 2) * 127 + 128;\n    const b = Math.sin(value + 4) * 127 + 128;\n    return `rgb(${r.toFixed(0)}, ${g.toFixed(0)}, ${b.toFixed(0)})`;\n  };\n\nconst ChatRoom = () => {\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const socketURL = 'http://localhost:8080/ws';\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, \"connected\": true });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":    \n        const updatedPrivateChats = new Map(privateChats);\n        if (!updatedPrivateChats.has(payloadData.senderName)) {\n            let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n            console.log(\"HERE\", privateChats);\n            let updatedMessages = existingMessages.concat(payloadData);\n            updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n            setPrivateChats(updatedPrivateChats);\n          } else {\n            updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n          }\n        break;\n      case \"MESSAGE\":\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats((prevPrivateChats) => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleMessage = (event) => {\n    const { value } = event.target;\n    setUserData({ ...userData, \"message\": value });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData, \"message\": \"\" });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData, \"message\": \"\" });\n    }\n  };\n\n  const handleUsername = (event) => {\n    const { value } = event.target;\n    setUserData({ ...userData, \"username\": value });\n  };\n\n  const transformArrayToMap = (array) => {\n    const map = new Map();\n    array.forEach((item) => {\n      const key = item.senderName !== userData.username ? item.senderName : item.chatId;\n      const value = {\n        id: item.id,\n        senderName: item.senderName,\n        recieverName: item.chatId,\n        message: item.message,\n        status: \"MESSAGE\",\n      };\n\n      if (!map.has(key)) {\n        map.set(key, []);\n      }\n\n      map.get(key).push(value);\n    });\n\n    return map;\n  };\n\n  const registerUser = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", { name: userData.username }, config);\n      const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n      const privateResponse = await axios.get(\"http://localhost:8080/messages/private/\" + userData.username, config);\n      const publicChatData = publicResponse.data.map((publicMessage) => ({ ...publicMessage, status: \"MESSAGE\", receiverName: null }));\n      const privateChatData = privateResponse.data;\n\n      const MapPrivateChat = transformArrayToMap(privateChatData);\n      setPublicChats(publicChatData);\n      setPrivateChats(MapPrivateChat);\n      connectWebSocket();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n  const getAvatarColor = (name) => {\n    const nameValue = name\n      .split('')\n      .map((char) => char.charCodeAt(0))\n      .reduce((acc, cur) => acc + cur, 0);\n    return generateRandomColor(nameValue);\n  };\n  return (\n    <div>\n      {userData.connected ? (\n        <div className=\"chat-box\">\n          <div className=\"member-list\">\n            <ul>\n              <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\n              {[...privateChats.keys()].map((name, index) => (\n                <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\n              ))}\n            </ul>\n          </div>\n          {tab === \"CHATROOM\" && (\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {publicChats.map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the messageenter the message\"\n                  value={userData.message}\n                  onChange={handleMessage}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={sendValue}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n          {tab !== \"CHATROOM\" && (\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {[...privateChats.get(tab)].map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the message\"\n                  value={userData.message}\n                  onChange={handleMessage}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"register\">\n          <input\n            id=\"user-name\"\n            placeholder=\"Enter your name\"\n            name=\"userName\"\n            value={userData.username}\n            onChange={handleUsername}\n            margin=\"normal\"\n          />\n          <button type=\"button\" onClick={registerUser}>\n            connect\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}