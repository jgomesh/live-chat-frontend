{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport searchForFriend from '../utils/searchForFriend';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport getAvatarColor from '../utils/getAvatarColor';\nimport registerUser from '../utils/registerUser';\nimport addFriend from '../utils/addFriend';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport handleChange from '../utils/handleFriendInput';\nimport api_data from '../api/config';\nimport sendValue from '../utils/sendValue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\"\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const {\n      URL,\n      PORT\n    } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        const updatedPrivateChats = new Map(privateChats);\n\n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats(prevChats => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevPrivateChats => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n              setAddFriendTabOpen(false);\n              scrollToBottom();\n            },\n            className: `member ${tab === \"CHATROOM\" && !addFriendTabOpen && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n              setAddFriendTabOpen(false);\n              scrollToBottom();\n            },\n            className: `member ${tab === name && !addFriendTabOpen && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `member  ${addFriendTabOpen && \"active\"}`,\n            onClick: () => setAddFriendTabOpen(true),\n            children: \"Adicionar amigo + \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), tab === \"CHATROOM\" && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the messageenter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: () => sendValue(stompClient, userData, setUserData),\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), tab !== \"CHATROOM\" && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: () => sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData),\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages search-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"friendName\",\n              value: friendInput.friendName,\n              onChange: event => handleChange(event, setFriendInput, friendInput)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => searchForFriend(friendInput, setFriendInput),\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: !friendInput.friendNotFound && friendInput.friendNotFound !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"add-user-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: friendInput.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => addFriend(setPrivateChats, setFriendInput, friendInput),\n                children: \"Add +\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 27\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: friendInput.friendNotFound !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Friend not found!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 74\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"username\",\n        value: userData.username,\n        onChange: event => handleChange(event, setUserData, userData),\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => registerUser(connectWebSocket, setPublicChats, setPrivateChats, userData),\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"3BC+Wndorx5PO7zWv27vR+hWiMc=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","searchForFriend","scrollToBottom","getAvatarColor","registerUser","addFriend","sendPrivateValue","handleChange","api_data","sendValue","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","friendInput","setFriendInput","friendName","addFriendTabOpen","setAddFriendTabOpen","userData","setUserData","username","receivername","connected","message","connectWebSocket","URL","PORT","socketURL","socket","connect","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","updatedPrivateChats","prevChats","prevPrivateChats","existingMessages","get","set","has","updatedMessages","concat","handleMessage","event","value","target","keys","map","name","index","chat","backgroundColor","friendNotFound","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAEA,IAAIC,WAAJ;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,IAAIiB,GAAJ,EAAD,CAAhD;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACoB,GAAD,EAAMC,MAAN,IAAgBrB,QAAQ,CAAC,UAAD,CAA9B;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC;AAC7CwB,IAAAA,UAAU,EAAE;AADiC,GAAD,CAA9C;AAGA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0C1B,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC;AACvC6B,IAAAA,QAAQ,EAAE,EAD6B;AAEvCC,IAAAA,YAAY,EAAE,EAFyB;AAGvCC,IAAAA,SAAS,EAAE,KAH4B;AAIvCC,IAAAA,OAAO,EAAE;AAJ8B,GAAD,CAAxC;AAOAjC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACa,WAAD,EAAcH,YAAd,EAA4BK,GAA5B,CAFM,CAAT;AAIArB,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACsB,QAAD,CAFM,CAAT;;AAIA,QAAMM,gBAAgB,GAAG,MAAM;AAC7B,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgBxB,QAAtB;AACA,UAAMyB,SAAS,GAAI,UAASF,GAAI,IAAGC,IAAK,KAAxC;AACA,UAAME,MAAM,GAAG,IAAIlC,MAAJ,CAAWiC,SAAX,CAAf;AACAvB,IAAAA,WAAW,GAAGZ,IAAI,CAACoC,MAAD,CAAlB;AACAxB,IAAAA,WAAW,CAACyB,OAAZ,CAAoB,EAApB,EAAwBC,WAAxB,EAAqCrC,OAArC;AACD,GAND;;AAQA,QAAMqC,WAAW,GAAG,MAAM;AACxBX,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,mBAAa;AAA5B,KAAD,CAAX;AACAd,IAAAA,WAAW,CAAC2B,SAAZ,CAAsB,kBAAtB,EAA0CC,iBAA1C;AACA5B,IAAAA,WAAW,CAAC2B,SAAZ,CAAsB,WAAWb,QAAQ,CAACE,QAApB,GAA+B,UAArD,EAAiEa,gBAAjE;AACAC,IAAAA,QAAQ;AACT,GALD;;AAOA,QAAMA,QAAQ,GAAG,MAAM;AACrB,QAAIC,WAAW,GAAG;AAChBC,MAAAA,UAAU,EAAElB,QAAQ,CAACE,QADL;AAEhBiB,MAAAA,MAAM,EAAE;AAFQ,KAAlB;AAIAjC,IAAAA,WAAW,CAACkC,IAAZ,CAAiB,cAAjB,EAAiC,EAAjC,EAAqCC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAArC;AACD,GAND;;AAQA,QAAMH,iBAAiB,GAAIS,OAAD,IAAa;AACrC,QAAIC,WAAW,GAAGH,IAAI,CAACI,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAlB;;AACA,YAAQF,WAAW,CAACL,MAApB;AACE,WAAK,MAAL;AACE,cAAMQ,mBAAmB,GAAG,IAAIrC,GAAJ,CAAQF,YAAR,CAA5B;;AAEA,YAAIoC,WAAW,CAACN,UAAZ,KAA2BlB,QAAQ,CAACE,QAAxC,EAAkD;AAChDb,UAAAA,eAAe,CAAEuC,SAAD,IAAe;AAC7B,kBAAMC,gBAAgB,GAAG,IAAIvC,GAAJ,CAAQsC,SAAR,CAAzB;AACA,kBAAME,gBAAgB,GAAGD,gBAAgB,CAACE,GAAjB,CAAqBP,WAAW,CAACN,UAAjC,KAAgD,EAAzE;AACAW,YAAAA,gBAAgB,CAACG,GAAjB,CAAqBR,WAAW,CAACN,UAAjC,EAA6CY,gBAA7C;AACA,mBAAOD,gBAAP;AACD,WALc,CAAf;AAMD,SAPD,MAOO;AACLF,UAAAA,mBAAmB,CAACK,GAApB,CAAwBR,WAAW,CAACN,UAApC,EAAgD,CAACM,WAAD,CAAhD;AACD;;AACD;;AACF,WAAK,SAAL;AACEhC,QAAAA,cAAc,CAAEoC,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAeJ,WAAf,CAAhB,CAAd;AACA;AAjBJ;AAmBD,GArBD;;AAwBA,QAAMT,gBAAgB,GAAIQ,OAAD,IAAa;AACpC,QAAIC,WAAW,GAAGH,IAAI,CAACI,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAlB;AACArC,IAAAA,eAAe,CAAEwC,gBAAD,IAAsB;AACpC,YAAMF,mBAAmB,GAAG,IAAIrC,GAAJ,CAAQuC,gBAAR,CAA5B;;AACA,UAAIF,mBAAmB,CAACM,GAApB,CAAwBT,WAAW,CAACN,UAApC,CAAJ,EAAqD;AACnD,YAAIY,gBAAgB,GAAGH,mBAAmB,CAACI,GAApB,CAAwBP,WAAW,CAACN,UAApC,CAAvB;AACA,YAAIgB,eAAe,GAAGJ,gBAAgB,CAACK,MAAjB,CAAwBX,WAAxB,CAAtB;AACAG,QAAAA,mBAAmB,CAACK,GAApB,CAAwBR,WAAW,CAACN,UAApC,EAAgDgB,eAAhD;AACD,OAJD,MAIO;AACLP,QAAAA,mBAAmB,CAACK,GAApB,CAAwBR,WAAW,CAACN,UAApC,EAAgD,CAACM,WAAD,CAAhD;AACD;;AACD,aAAOG,mBAAP;AACD,KAVc,CAAf;AAWD,GAbD;;AAeA,QAAMS,aAAa,GAAIC,KAAD,IAAW;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAK,CAACE,MAAxB;AACAtC,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,iBAAWsC;AAA1B,KAAD,CAAX;AACD,GAHD;;AAKA,sBACE;AAAA,cACGtC,QAAQ,CAACI,SAAT,gBACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACE;AAAA,kCACE;AAAI,YAAA,OAAO,EAAE,MAAM;AACjBV,cAAAA,MAAM,CAAC,UAAD,CAAN;AACAK,cAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACArB,cAAAA,cAAc;AACb,aAJH;AAIK,YAAA,SAAS,EAAG,UAAUe,GAAG,KAAK,UAAR,IAAuB,CAACK,gBAAzB,IAA8C,QAAS,EAJjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAMG,CAAC,GAAGV,YAAY,CAACoD,IAAb,EAAJ,EAAyBC,GAAzB,CAA6B,CAACC,IAAD,EAAOC,KAAP,kBAC5B;AAAI,YAAA,OAAO,EAAE,MAAM;AACjBjD,cAAAA,MAAM,CAACgD,IAAD,CAAN;AACA3C,cAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACArB,cAAAA,cAAc;AACf,aAJD;AAIG,YAAA,SAAS,EAAG,UAAUe,GAAG,KAAKiD,IAAR,IAAiB,CAAC5C,gBAAnB,IAAwC,QAAS,EAJzE;AAAA,sBAIyF4C;AAJzF,aAIiFC,KAJjF;AAAA;AAAA;AAAA;AAAA,kBADD,CANH,eAaE;AAAI,YAAA,SAAS,EAAG,WAAW7C,gBAAD,IAAsB,QAAS,EAAzD;AAA4D,YAAA,OAAO,EAAE,MAAMC,mBAAmB,CAAC,IAAD,CAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EAkBGN,GAAG,KAAK,UAAR,IAAsB,CAACK,gBAAvB,iBACC;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBACGP,WAAW,CAACkD,GAAZ,CAAgB,CAACG,IAAD,EAAOD,KAAP,kBACf;AAAI,YAAA,SAAS,EAAG,WAAUC,IAAI,CAAC1B,UAAL,KAAoBlB,QAAQ,CAACE,QAA7B,IAAyC,MAAO,EAA1E;AAAA,uBACG0C,IAAI,CAAC1B,UAAL,KAAoBlB,QAAQ,CAACE,QAA7B,iBACC;AACE,cAAA,SAAS,EAAC,QADZ;AAEE,cAAA,KAAK,EAAE;AAAE2C,gBAAAA,eAAe,EAAElE,cAAc,CAACiE,IAAI,CAAC1B,UAAN;AAAjC,eAFT;AAAA,wBAIG0B,IAAI,CAAC1B;AAJR;AAAA;AAAA;AAAA;AAAA,oBAFJ,eASE;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,wBAA+B0B,IAAI,CAACvC;AAApC;AAAA;AAAA;AAAA;AAAA,oBATF,EAUGuC,IAAI,CAAC1B,UAAL,KAAoBlB,QAAQ,CAACE,QAA7B,iBACC;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBAA8B0C,IAAI,CAAC1B;AAAnC;AAAA;AAAA;AAAA;AAAA,oBAXJ;AAAA,aAAkFyB,KAAlF;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAoBE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,SAAS,EAAC,eAFZ;AAGE,YAAA,WAAW,EAAC,oCAHd;AAIE,YAAA,KAAK,EAAE3C,QAAQ,CAACK,OAJlB;AAKE,YAAA,QAAQ,EAAE+B;AALZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,aAAhC;AAA8C,YAAA,OAAO,EAAE,MAAMnD,SAAS,CAACC,WAAD,EAAcc,QAAd,EAAwBC,WAAxB,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,EAqDGR,GAAG,KAAK,UAAR,IAAsB,CAACK,gBAAvB,iBACC;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBACG,CAAC,GAAGV,YAAY,CAAC2C,GAAb,CAAiBtC,GAAjB,CAAJ,EAA2BgD,GAA3B,CAA+B,CAACG,IAAD,EAAOD,KAAP,kBAC9B;AAAI,YAAA,SAAS,EAAG,WAAUC,IAAI,CAAC1B,UAAL,KAAoBlB,QAAQ,CAACE,QAA7B,IAAyC,MAAO,EAA1E;AAAA,uBACG0C,IAAI,CAAC1B,UAAL,KAAoBlB,QAAQ,CAACE,QAA7B,iBACC;AACE,cAAA,SAAS,EAAC,QADZ;AAEE,cAAA,KAAK,EAAE;AAAE2C,gBAAAA,eAAe,EAAElE,cAAc,CAACiE,IAAI,CAAC1B,UAAN;AAAjC,eAFT;AAAA,wBAIG0B,IAAI,CAAC1B;AAJR;AAAA;AAAA;AAAA;AAAA,oBAFJ,eASE;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,wBAA+B0B,IAAI,CAACvC;AAApC;AAAA;AAAA;AAAA;AAAA,oBATF,EAUGuC,IAAI,CAAC1B,UAAL,KAAoBlB,QAAQ,CAACE,QAA7B,iBACC;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBAA8B0C,IAAI,CAAC1B;AAAnC;AAAA;AAAA;AAAA;AAAA,oBAXJ;AAAA,aAAkFyB,KAAlF;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAoBE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,SAAS,EAAC,eAFZ;AAGE,YAAA,WAAW,EAAC,mBAHd;AAIE,YAAA,KAAK,EAAE3C,QAAQ,CAACK,OAJlB;AAKE,YAAA,QAAQ,EAAE+B;AALZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,aAAhC;AAA8C,YAAA,OAAO,EAAE,MAAMtD,gBAAgB,CAACI,WAAD,EAAcc,QAAd,EAAwBP,GAAxB,EAA6BJ,eAA7B,EAA8CY,WAA9C,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAtDJ,EAyFIH,gBAAgB,iBACV;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,kBAAf;AAAA,oCACE;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,YAAxB;AAAqC,cAAA,KAAK,EAAEH,WAAW,CAACE,UAAxD;AAAoE,cAAA,QAAQ,EAAGwC,KAAD,IAAWtD,YAAY,CAACsD,KAAD,EAAQzC,cAAR,EAAwBD,WAAxB;AAArG;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAQ,cAAA,OAAO,EAAE,MAAMlB,eAAe,CAACkB,WAAD,EAAcC,cAAd,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAA,sBACK,CAACD,WAAW,CAACmD,cAAb,IAA+BnD,WAAW,CAACmD,cAAZ,KAA+BC,SAA/D,gBACA;AAAK,cAAA,SAAS,EAAC,oBAAf;AAAA,sCACE;AAAA,0BAAOpD,WAAW,CAAC+C;AAAnB;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAQ,gBAAA,OAAO,EAAE,MAAM7D,SAAS,CAACQ,eAAD,EAAkBO,cAAlB,EAAkCD,WAAlC,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,gBAMA;AAAA,wBACGA,WAAW,CAACmD,cAAZ,KAA+BC,SAA/B,iBAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAD/C;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA1FV;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAqHC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACE;AACE,QAAA,EAAE,EAAC,WADL;AAEE,QAAA,WAAW,EAAC,iBAFd;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAE/C,QAAQ,CAACE,QAJlB;AAKE,QAAA,QAAQ,EAAGmC,KAAD,IAAWtD,YAAY,CAACsD,KAAD,EAAQpC,WAAR,EAAqBD,QAArB,CALnC;AAME,QAAA,MAAM,EAAC;AANT;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,MAAMpB,YAAY,CAAC0B,gBAAD,EAAmBd,cAAnB,EAAmCH,eAAnC,EAAoDW,QAApD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAtHJ;AAAA;AAAA;AAAA;AAAA,UADF;AAuID,CAjOD;;GAAMb,Q;;KAAAA,Q;AAmON,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport searchForFriend from '../utils/searchForFriend';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport getAvatarColor from '../utils/getAvatarColor';\nimport registerUser from '../utils/registerUser';\nimport addFriend from '../utils/addFriend';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport handleChange from '../utils/handleFriendInput';\nimport api_data from '../api/config';\nimport sendValue from '../utils/sendValue';\n\nlet stompClient;\n\nconst ChatRoom = () => {\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\",\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const { URL, PORT } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, \"connected\": true });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":    \n        const updatedPrivateChats = new Map(privateChats);\n        \n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats((prevChats) => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n        break;        \n      case \"MESSAGE\":\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\n        break;\n    }\n  };\n  \n\n  const onPrivateMessage = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats((prevPrivateChats) => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleMessage = (event) => {\n    const { value } = event.target;\n    setUserData({ ...userData, \"message\": value });\n  };\n  \n  return (\n    <div>\n      {userData.connected ? (\n        <div className=\"chat-box\">\n          <div className=\"member-list\">\n            <ul>\n              <li onClick={() => {\n                setTab(\"CHATROOM\");\n                setAddFriendTabOpen(false);\n                scrollToBottom();\n                }} className={`member ${(tab === \"CHATROOM\" &&  !addFriendTabOpen) && \"active\"}`}>Chatroom</li>\n              {[...privateChats.keys()].map((name, index) => (\n                <li onClick={() => {\n                  setTab(name);\n                  setAddFriendTabOpen(false);\n                  scrollToBottom();\n                }} className={`member ${(tab === name &&  !addFriendTabOpen) && \"active\"}`} key={index}>{name}</li>\n              ))}\n              <li className={`member  ${(addFriendTabOpen) && \"active\"}`} onClick={() => setAddFriendTabOpen(true)}>Adicionar amigo + </li>\n            </ul>\n          </div>\n          {tab === \"CHATROOM\" && !addFriendTabOpen && (\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {publicChats.map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the messageenter the message\"\n                  value={userData.message}\n                  onChange={handleMessage}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={() => sendValue(stompClient, userData, setUserData)}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n          {tab !== \"CHATROOM\" && !addFriendTabOpen&&(\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {[...privateChats.get(tab)].map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the message\"\n                  value={userData.message}\n                  onChange={handleMessage}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={() => sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData)}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n          {\n            addFriendTabOpen && (\n                  <div className=\"chat-content\">\n                    <div className=\"chat-messages search-div\">\n                      <div className=\"search-container\">\n                        <input type=\"text\" name=\"friendName\" value={friendInput.friendName} onChange={(event) => handleChange(event, setFriendInput, friendInput)} />\n                        <button onClick={() => searchForFriend(friendInput, setFriendInput)}>\n                          Search\n                        </button>\n                      </div>\n                      <div>\n                        { (!friendInput.friendNotFound && friendInput.friendNotFound !== undefined) ? (\n                          <div className=\"add-user-container\">\n                            <span>{friendInput.name}</span>\n                            <button onClick={() => addFriend(setPrivateChats, setFriendInput, friendInput)}>Add +</button>\n                          </div>\n                        ) : (\n                          <div>\n                            {friendInput.friendNotFound !== undefined && <span>Friend not found!</span>}\n                          </div>\n                        )}\n                      </div> \n                    </div>\n                  </div>\n                )\n              }\n        </div>\n      ) : (\n        <div className=\"register\">\n          <input\n            id=\"user-name\"\n            placeholder=\"Enter your name\"\n            name=\"username\"\n            value={userData.username}\n            onChange={(event) => handleChange(event, setUserData, userData)}\n            margin=\"normal\"\n          />\n          <button type=\"button\" onClick={() => registerUser(connectWebSocket, setPublicChats, setPrivateChats, userData)}>\n            connect\n          </button>\n        </div>\n      )}\n    </div>  \n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}