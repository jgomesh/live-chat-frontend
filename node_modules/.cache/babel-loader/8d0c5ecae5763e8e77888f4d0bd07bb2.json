{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios';\nimport getAvatarColor from '../utils/getAvatarColor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState(\"\");\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const socketURL = 'http://localhost:8080/ws';\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        const updatedPrivateChats = new Map(privateChats);\n\n        if (!updatedPrivateChats.has(payloadData.senderName)) {\n          let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n          console.log(\"HERE\", privateChats);\n          let updatedMessages = existingMessages.concat(payloadData);\n          updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n          setPrivateChats(updatedPrivateChats);\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevPrivateChats => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const transformArrayToMap = array => {\n    const map = new Map();\n    array.forEach(item => {\n      const key = item.senderName !== userData.username ? item.senderName : item.chatId;\n      const value = {\n        id: item.id,\n        senderName: item.senderName,\n        recieverName: item.chatId,\n        message: item.message,\n        status: \"MESSAGE\"\n      };\n\n      if (!map.has(key)) {\n        map.set(key, []);\n      }\n\n      map.get(key).push(value);\n    });\n    return map;\n  };\n\n  const registerUser = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", {\n        name: userData.username\n      }, config);\n      const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n      const privateResponse = await axios.get(\"http://localhost:8080/messages/private/\" + userData.username, config);\n      const publicChatData = publicResponse.data.map(publicMessage => ({ ...publicMessage,\n        status: \"MESSAGE\",\n        receiverName: null\n      }));\n      const privateChatData = privateResponse.data;\n      const MapPrivateChat = transformArrayToMap(privateChatData);\n      setPublicChats(publicChatData);\n      setPrivateChats(MapPrivateChat);\n      connectWebSocket();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const searchForFriend = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const friendResponse = await axios.get(\"http://localhost:8080/chat-user-register/user/as\" + userData.username, config);\n      const friendData = friendResponse.data;\n\n      if (friendData) {\n        console.log(friendData);\n      } else {\n        console.log(\"Esse usuário não existe\");\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n              setAddFriendTabOpen(false);\n            },\n            className: `member ${tab === \"CHATROOM\" && !addFriendTabOpen && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n              setAddFriendTabOpen(false);\n            },\n            className: `member ${tab === name && !addFriendTabOpen && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `member  ${addFriendTabOpen && \"active\"}`,\n            onClick: () => setAddFriendTabOpen(true),\n            children: \"Adicionar amigo + \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), tab === \"CHATROOM\" && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the messageenter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this), tab !== \"CHATROOM\" && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this), addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"friendName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: searchForFriend,\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"WotoefpnzcP/4si5ZIUWlQzz12I=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","axios","getAvatarColor","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","friendInput","setFriendInput","addFriendTabOpen","setAddFriendTabOpen","userData","setUserData","username","receivername","connected","message","console","log","connectWebSocket","socketURL","socket","connect","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","updatedPrivateChats","has","existingMessages","get","updatedMessages","concat","set","prevChats","prevPrivateChats","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","push","handleUsername","transformArrayToMap","array","map","forEach","item","key","chatId","id","recieverName","registerUser","config","headers","registerResponse","post","name","publicResponse","privateResponse","publicChatData","data","publicMessage","privateChatData","MapPrivateChat","error","searchForFriend","friendResponse","friendData","keys","index","chat","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios';\nimport getAvatarColor from '../utils/getAvatarColor';\n\nlet stompClient;\n\nconst ChatRoom = () => {\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState(\"\");\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const socketURL = 'http://localhost:8080/ws';\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, \"connected\": true });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":    \n        const updatedPrivateChats = new Map(privateChats);\n        if (!updatedPrivateChats.has(payloadData.senderName)) {\n            let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n            console.log(\"HERE\", privateChats);\n            let updatedMessages = existingMessages.concat(payloadData);\n            updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n            setPrivateChats(updatedPrivateChats);\n          } else {\n            updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n          }\n        break;\n      case \"MESSAGE\":\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats((prevPrivateChats) => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleMessage = (event) => {\n    const { value } = event.target;\n    setUserData({ ...userData, \"message\": value });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData, \"message\": \"\" });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      let chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData, \"message\": \"\" });\n    }\n  };\n\n  const handleUsername = (event) => {\n    const { value } = event.target;\n    setUserData({ ...userData, \"username\": value });\n  };\n\n  const transformArrayToMap = (array) => {\n    const map = new Map();\n    array.forEach((item) => {\n      const key = item.senderName !== userData.username ? item.senderName : item.chatId;\n      const value = {\n        id: item.id,\n        senderName: item.senderName,\n        recieverName: item.chatId,\n        message: item.message,\n        status: \"MESSAGE\",\n      };\n\n      if (!map.has(key)) {\n        map.set(key, []);\n      }\n\n      map.get(key).push(value);\n    });\n\n    return map;\n  };\n\n  const registerUser = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", { name: userData.username }, config);\n      const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n      const privateResponse = await axios.get(\"http://localhost:8080/messages/private/\" + userData.username, config);\n      const publicChatData = publicResponse.data.map((publicMessage) => ({ ...publicMessage, status: \"MESSAGE\", receiverName: null }));\n      const privateChatData = privateResponse.data;\n\n      const MapPrivateChat = transformArrayToMap(privateChatData);\n      setPublicChats(publicChatData);\n      setPrivateChats(MapPrivateChat);\n      connectWebSocket();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const searchForFriend = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const friendResponse = await axios.get(\"http://localhost:8080/chat-user-register/user/as\" + userData.username, config);\n      const friendData = friendResponse.data;\n      if(friendData) {\n        console.log(friendData);\n      } else {\n        console.log(\"Esse usuário não existe\")\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  return (\n    <div>\n      {userData.connected ? (\n        <div className=\"chat-box\">\n          <div className=\"member-list\">\n            <ul>\n              <li onClick={() => {\n                setTab(\"CHATROOM\");\n                setAddFriendTabOpen(false);\n                }} className={`member ${(tab === \"CHATROOM\" &&  !addFriendTabOpen) && \"active\"}`}>Chatroom</li>\n              {[...privateChats.keys()].map((name, index) => (\n                <li onClick={() => {\n                  setTab(name);\n                  setAddFriendTabOpen(false);\n                }} className={`member ${(tab === name &&  !addFriendTabOpen) && \"active\"}`} key={index}>{name}</li>\n              ))}\n              <li className={`member  ${(addFriendTabOpen) && \"active\"}`} onClick={() => setAddFriendTabOpen(true)}>Adicionar amigo + </li>\n            </ul>\n          </div>\n          {tab === \"CHATROOM\" && !addFriendTabOpen && (\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {publicChats.map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the messageenter the message\"\n                  value={userData.message}\n                  onChange={handleMessage}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={sendValue}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n          {tab !== \"CHATROOM\" && !addFriendTabOpen&&(\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {[...privateChats.get(tab)].map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the message\"\n                  value={userData.message}\n                  onChange={handleMessage}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n          {\n            addFriendTabOpen && (\n                  <div className=\"chat-content\">\n                    <div className=\"chat-messages\">\n                      <div>\n                        <input type=\"text\" name=\"friendName\" />\n                        <button onClick={searchForFriend}>\n                          Search\n                        </button>\n                      </div>\n                      <div>\n                      </div> \n                    </div>\n                  </div>\n                )\n              }\n        </div>\n      ) : (\n        <div className=\"register\">\n          <input\n            id=\"user-name\"\n            placeholder=\"Enter your name\"\n            name=\"userName\"\n            value={userData.username}\n            onChange={handleUsername}\n            margin=\"normal\"\n          />\n          <button type=\"button\" onClick={registerUser}>\n            connect\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}