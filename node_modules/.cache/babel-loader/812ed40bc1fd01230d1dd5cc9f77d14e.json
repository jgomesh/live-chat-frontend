{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport registerUser from '../utils/registerUser';\nimport onError from '../utils/onError';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 34\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => registerUser(onError, stompClient, setUserData, userData),\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"RTXibMkTioQUd0iwG0mBbBior6c=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","registerUser","onError","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","handleMessage","event","value","target","sendValue","chatMessage","senderName","status","send","JSON","stringify","sendPrivateValue","receiverName","get","push","handleUsername","keys","map","name","index","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport registerUser from '../utils/registerUser';\nimport onError from '../utils/onError';\n\nlet stompClient = null;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());     \n    const [publicChats, setPublicChats] = useState([]); \n    const [tab,setTab] =useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n      });\n    useEffect(() => {\n      console.log(userData);\n    }, [userData]);\n\n\n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n            if (stompClient) {\n              var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n              };\n              console.log(chatMessage);\n              stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n              setUserData({...userData,\"message\": \"\"});\n            }\n    }\n\n    const sendPrivateValue=()=>{\n        if (stompClient) {\n          var chatMessage = {\n            senderName: userData.username,\n            receiverName:tab,\n            message: userData.message,\n            status:\"MESSAGE\"\n          };\n          \n          if(userData.username !== tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n          }\n          stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n          setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const handleUsername=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\": value});\n    }\n\n    return (\n    <div className=\"container\">\n        {userData.connected?\n        <div className=\"chat-box\">\n            <div className=\"member-list\">\n                <ul>\n                    <li onClick={()=>{setTab(\"CHATROOM\")}} className={`member ${tab===\"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                    {[...privateChats.keys()].map((name,index)=>(\n                        <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"}`} key={index}>{name}</li>\n                    ))}\n                </ul>\n            </div>\n            {tab===\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {publicChats.map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                </div>\n            </div>}\n            {tab!==\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {[...privateChats.get(tab)].map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\n                </div>\n            </div>}\n        </div>\n        :\n        <div className=\"register\">\n            <input\n                id=\"user-name\"\n                placeholder=\"Enter your name\"\n                name=\"userName\"\n                value={userData.username}\n                onChange={handleUsername}\n                margin=\"normal\"\n              />\n              <button type=\"button\" onClick={() => registerUser(onError, stompClient, setUserData, userData)}>\n                    connect\n              </button> \n        </div>}\n    </div>\n    )\n}\n\nexport default ChatRoom\n"]},"metadata":{},"sourceType":"module"}