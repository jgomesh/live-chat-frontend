{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport ChatContent from './ChatContent';\nimport RegisterForm from './RegisterForm';\nimport handleMessage from '../utils/handleMessage';\nimport api_data from '../api/config';\nimport FriendSearch from './FriendSearch';\nimport FriendsList from './FriendsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\"\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const {\n      URL,\n      PORT\n    } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        const updatedPrivateChats = new Map(privateChats);\n\n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats(prevChats => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevPrivateChats => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n\n      return updatedPrivateChats;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(FriendsList, {\n        setTab: setTab,\n        setAddFriendTabOpen: setAddFriendTabOpen,\n        tab: tab,\n        addFriendTabOpen: addFriendTabOpen,\n        privateChats: privateChats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), tab === 'CHATROOM' && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(ChatContent, {\n        chats: publicChats,\n        username: userData.username,\n        message: userData.message,\n        onMessageChange: event => handleMessage(event, userData, setUserData),\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), tab !== 'CHATROOM' && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(ChatContent, {\n        chats: privateChats.get(tab) || [],\n        username: userData.username,\n        message: userData.message,\n        onMessageChange: event => handleMessage(event, userData, setUserData),\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FriendSearch, {\n        addFriendTabOpen: addFriendTabOpen,\n        friendInput: friendInput,\n        setFriendInput: setFriendInput,\n        setPrivateChats: setPrivateChats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n      setUserData: setUserData,\n      userData: userData,\n      connectWebSocket: connectWebSocket,\n      setPublicChats: setPublicChats,\n      setPrivateChats: setPrivateChats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"3BC+Wndorx5PO7zWv27vR+hWiMc=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","scrollToBottom","ChatContent","RegisterForm","handleMessage","api_data","FriendSearch","FriendsList","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","friendInput","setFriendInput","friendName","addFriendTabOpen","setAddFriendTabOpen","userData","setUserData","username","receivername","connected","message","connectWebSocket","URL","PORT","socketURL","socket","connect","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","updatedPrivateChats","prevChats","prevPrivateChats","existingMessages","get","set","has","updatedMessages","concat","event","handleSendMessage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport ChatContent from './ChatContent';\nimport RegisterForm from './RegisterForm';\nimport handleMessage from '../utils/handleMessage';\nimport api_data from '../api/config';\nimport FriendSearch from './FriendSearch';\nimport FriendsList from './FriendsList';\n\nlet stompClient;\n\nconst ChatRoom = () => {\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\",\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const { URL, PORT } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, \"connected\": true });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":    \n        const updatedPrivateChats = new Map(privateChats);\n        \n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats((prevChats) => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n        break;        \n      case \"MESSAGE\":\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\n        break;\n    }\n  };\n  \n\n  const onPrivateMessage = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats((prevPrivateChats) => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n      return updatedPrivateChats;\n    });\n  };\n  \n\n  return (\n    <div>\n      {userData.connected ? (\n        <div className=\"chat-box\">\n          <FriendsList\n            setTab={setTab}\n            setAddFriendTabOpen={setAddFriendTabOpen}\n            tab={tab}\n            addFriendTabOpen={addFriendTabOpen}\n            privateChats={privateChats}\n          />\n          {tab === 'CHATROOM' && !addFriendTabOpen && (\n            <ChatContent\n              chats={publicChats}\n              username={userData.username}\n              message={userData.message}\n              onMessageChange={(event) => handleMessage(event, userData, setUserData)}\n              onSendMessage={handleSendMessage}\n            />\n          )}\n          {tab !== 'CHATROOM' && !addFriendTabOpen && (\n            <ChatContent\n              chats={privateChats.get(tab) || []}\n              username={userData.username}\n              message={userData.message}\n              onMessageChange={(event) => handleMessage(event, userData, setUserData)}\n              onSendMessage={handleSendMessage}\n            />\n          )}\n          <FriendSearch\n            addFriendTabOpen={addFriendTabOpen}\n            friendInput={friendInput}\n            setFriendInput={setFriendInput}\n            setPrivateChats={setPrivateChats}\n          />\n        </div>\n      ) : (\n        <RegisterForm\n          setUserData={setUserData}\n          userData={userData}\n          connectWebSocket={connectWebSocket}\n          setPublicChats={setPublicChats}\n          setPrivateChats={setPrivateChats}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}