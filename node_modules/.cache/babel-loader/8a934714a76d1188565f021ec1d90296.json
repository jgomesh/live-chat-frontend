{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  const sendAutomaticMessage = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: 'Sim, eu fiz uma mensagem automÃ¡tica sem sentido.',\n        status: 'MESSAGE'\n      };\n      stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n    }\n  };\n\n  useEffect(() => {\n    console.log(userData);\n    console.log(privateChats.get(\"Gomes\"));\n  }, [userData]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      sendAutomaticMessage();\n    }, 120000); // 2 minutos em milissegundos\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const registerUser = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        }\n      };\n      const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", {\n        name: userData.username\n      }, config);\n      const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n      const privateResponse = await axios.get(\"localhost:8080/messages/private/\" + userData.username, config);\n      const publicChatData = publicResponse.data.map(publicMessage => ({ ...publicMessage,\n        status: \"MESSAGE\",\n        receiverName: null\n      }));\n      setPublicChats(publicChatData);\n      connect();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 34\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"BAPRn2lR6/QF5We9cEHS89Oed2c=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","axios","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","sendAutomaticMessage","chatMessage","senderName","status","send","JSON","stringify","console","log","get","interval","setInterval","clearInterval","connect","Sock","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","payload","payloadData","parse","body","set","prevChats","push","list","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","registerUser","config","headers","registerResponse","post","name","publicResponse","privateResponse","publicChatData","data","map","publicMessage","error","keys","index","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {over} from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport axios from 'axios'\n\nvar stompClient =null;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());     \n    const [publicChats, setPublicChats] = useState([]); \n    const [tab,setTab] =useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n      });\n      const sendAutomaticMessage = () => {\n        if (stompClient) {\n          var chatMessage = {\n            senderName: userData.username,\n            message: 'Sim, eu fiz uma mensagem automÃ¡tica sem sentido.',\n            status: 'MESSAGE',\n          };\n          stompClient.send('/app/message', {}, JSON.stringify(chatMessage));\n        }\n      };\n    useEffect(() => {\n      console.log(userData);\n      console.log(privateChats.get(\"Gomes\"));\n    }, [userData]);\n    useEffect(() => {\n        const interval = setInterval(() => {\n          sendAutomaticMessage();\n        }, 120000); // 2 minutos em milissegundos\n    \n        return () => {\n          clearInterval(interval);\n        };\n      }, []);\n    const connect =()=>{\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({},onConnected, onError);\n    }\n\n    const onConnected = () => {\n        setUserData({...userData,\"connected\": true});\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n        userJoin();\n    }\n\n    const userJoin=()=>{\n          var chatMessage = {\n            senderName: userData.username,\n            status:\"JOIN\"\n          };\n          stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n\n    const onMessageReceived = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n          case \"JOIN\":\n            if (!privateChats.get(payloadData.senderName)) {\n              privateChats.set(payloadData.senderName, []);\n              setPrivateChats(new Map(privateChats));\n            }\n            break;\n          case \"MESSAGE\":\n            setPublicChats((prevChats) => [...prevChats, payloadData]);\n            break;\n        }\n      };\n    \n    const onPrivateMessage = (payload)=>{\n        var payloadData = JSON.parse(payload.body);\n        if(privateChats.get(payloadData.senderName)){\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        }else{\n            let list =[];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName,list);\n            setPrivateChats(new Map(privateChats));\n        }\n    }\n\n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n            if (stompClient) {\n              var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n              };\n              console.log(chatMessage);\n              stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n              setUserData({...userData,\"message\": \"\"});\n            }\n    }\n\n    const sendPrivateValue=()=>{\n        if (stompClient) {\n          var chatMessage = {\n            senderName: userData.username,\n            receiverName:tab,\n            message: userData.message,\n            status:\"MESSAGE\"\n          };\n          \n          if(userData.username !== tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n          }\n          stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n          setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const handleUsername=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\": value});\n    }\n\n    const registerUser = async () => {\n        try {\n            const config = {\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n                }\n              };\n            const registerResponse = await axios.post(\"http://localhost:8080/chat-user-register\", { name: userData.username }, config);\n            const publicResponse = await axios.get(\"http://localhost:8080/messages/public\", config);\n            const privateResponse = await axios.get(\"localhost:8080/messages/private/\" + userData.username, config);\n            const publicChatData = publicResponse.data.map((publicMessage) => ({...publicMessage, status: \"MESSAGE\", receiverName: null}));\n            setPublicChats(publicChatData);\n            connect();\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n    return (\n    <div className=\"container\">\n        {userData.connected?\n        <div className=\"chat-box\">\n            <div className=\"member-list\">\n                <ul>\n                    <li onClick={()=>{setTab(\"CHATROOM\")}} className={`member ${tab===\"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                    {[...privateChats.keys()].map((name,index)=>(\n                        <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"}`} key={index}>{name}</li>\n                    ))}\n                </ul>\n            </div>\n            {tab===\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {publicChats.map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                </div>\n            </div>}\n            {tab!==\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {[...privateChats.get(tab)].map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\n                </div>\n            </div>}\n        </div>\n        :\n        <div className=\"register\">\n            <input\n                id=\"user-name\"\n                placeholder=\"Enter your name\"\n                name=\"userName\"\n                value={userData.username}\n                onChange={handleUsername}\n                margin=\"normal\"\n              />\n              <button type=\"button\" onClick={registerUser}>\n                    connect\n              </button> \n        </div>}\n    </div>\n    )\n}\n\nexport default ChatRoom\n"]},"metadata":{},"sourceType":"module"}