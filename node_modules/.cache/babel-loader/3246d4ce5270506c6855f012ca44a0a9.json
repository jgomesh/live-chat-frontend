{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/context/chatContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, createContext } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport api_data from '../api/config';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport sendValue from '../utils/sendValue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\n\nconst ChatProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\"\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const {\n      URL,\n      PORT\n    } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    const stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        const updatedPrivateChats = new Map(privateChats);\n\n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats(prevChats => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevPrivateChats => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n\n      return updatedPrivateChats;\n    });\n  };\n\n  const handleSendMessage = () => {\n    if (tab === 'CHATROOM') {\n      sendValue(stompClient, userData, setUserData);\n    } else {\n      sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      privateChats,\n      setPrivateChats,\n      publicChats,\n      setPublicChats,\n      tab,\n      setTab,\n      friendInput,\n      setFriendInput,\n      addFriendTabOpen,\n      setAddFriendTabOpen,\n      userData,\n      setUserData,\n      connectWebSocket,\n      handleSendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatProvider, \"3BC+Wndorx5PO7zWv27vR+hWiMc=\");\n\n_c = ChatProvider;\nexport default ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/context/chatContext.js"],"names":["React","useEffect","useState","createContext","over","onError","SockJS","scrollToBottom","api_data","sendPrivateValue","sendValue","ChatContext","ChatProvider","children","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","friendInput","setFriendInput","friendName","addFriendTabOpen","setAddFriendTabOpen","userData","setUserData","username","receivername","connected","message","connectWebSocket","URL","PORT","socketURL","socket","stompClient","connect","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","updatedPrivateChats","prevChats","prevPrivateChats","existingMessages","get","set","has","updatedMessages","concat","handleSendMessage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAEA,MAAMC,WAAW,gBAAGR,aAAa,EAAjC;;AAEA,MAAMS,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACrC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,IAAIc,GAAJ,EAAD,CAAhD;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiB,GAAD,EAAMC,MAAN,IAAgBlB,QAAQ,CAAC,UAAD,CAA9B;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC;AAC7CqB,IAAAA,UAAU,EAAE;AADiC,GAAD,CAA9C;AAGA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CvB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC;AACvC0B,IAAAA,QAAQ,EAAE,EAD6B;AAEvCC,IAAAA,YAAY,EAAE,EAFyB;AAGvCC,IAAAA,SAAS,EAAE,KAH4B;AAIvCC,IAAAA,OAAO,EAAE;AAJ8B,GAAD,CAAxC;AAOA9B,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACU,WAAD,EAAcH,YAAd,EAA4BK,GAA5B,CAFM,CAAT;AAIAlB,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACmB,QAAD,CAFM,CAAT;;AAIA,QAAMM,gBAAgB,GAAG,MAAM;AAC7B,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgB1B,QAAtB;AACA,UAAM2B,SAAS,GAAI,UAASF,GAAI,IAAGC,IAAK,KAAxC;AACA,UAAME,MAAM,GAAG,IAAI9B,MAAJ,CAAW6B,SAAX,CAAf;AACA,UAAME,WAAW,GAAGjC,IAAI,CAACgC,MAAD,CAAxB;AACAC,IAAAA,WAAW,CAACC,OAAZ,CAAoB,EAApB,EAAwBC,WAAxB,EAAqClC,OAArC;AACD,GAND;;AAQA,QAAMkC,WAAW,GAAG,MAAM;AACxBZ,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,mBAAa;AAA5B,KAAD,CAAX;AACAW,IAAAA,WAAW,CAACG,SAAZ,CAAsB,kBAAtB,EAA0CC,iBAA1C;AACAJ,IAAAA,WAAW,CAACG,SAAZ,CAAsB,WAAWd,QAAQ,CAACE,QAApB,GAA+B,UAArD,EAAiEc,gBAAjE;AACAC,IAAAA,QAAQ;AACT,GALD;;AAOA,QAAMA,QAAQ,GAAG,MAAM;AACrB,QAAIC,WAAW,GAAG;AAChBC,MAAAA,UAAU,EAAEnB,QAAQ,CAACE,QADL;AAEhBkB,MAAAA,MAAM,EAAE;AAFQ,KAAlB;AAIAT,IAAAA,WAAW,CAACU,IAAZ,CAAiB,cAAjB,EAAiC,EAAjC,EAAqCC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAArC;AACD,GAND;;AAQA,QAAMH,iBAAiB,GAAIS,OAAD,IAAa;AACrC,QAAIC,WAAW,GAAGH,IAAI,CAACI,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAlB;;AACA,YAAQF,WAAW,CAACL,MAApB;AACE,WAAK,MAAL;AACE,cAAMQ,mBAAmB,GAAG,IAAItC,GAAJ,CAAQF,YAAR,CAA5B;;AAEA,YAAIqC,WAAW,CAACN,UAAZ,KAA2BnB,QAAQ,CAACE,QAAxC,EAAkD;AAChDb,UAAAA,eAAe,CAAEwC,SAAD,IAAe;AAC7B,kBAAMC,gBAAgB,GAAG,IAAIxC,GAAJ,CAAQuC,SAAR,CAAzB;AACA,kBAAME,gBAAgB,GAAGD,gBAAgB,CAACE,GAAjB,CAAqBP,WAAW,CAACN,UAAjC,KAAgD,EAAzE;AACAW,YAAAA,gBAAgB,CAACG,GAAjB,CAAqBR,WAAW,CAACN,UAAjC,EAA6CY,gBAA7C;AACA,mBAAOD,gBAAP;AACD,WALc,CAAf;AAMD,SAPD,MAOO;AACLF,UAAAA,mBAAmB,CAACK,GAApB,CAAwBR,WAAW,CAACN,UAApC,EAAgD,CAACM,WAAD,CAAhD;AACD;;AACD;;AACF,WAAK,SAAL;AACEjC,QAAAA,cAAc,CAAEqC,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAeJ,WAAf,CAAhB,CAAd;AACA;AAjBJ;AAmBD,GArBD;;AAwBA,QAAMT,gBAAgB,GAAIQ,OAAD,IAAa;AACpC,QAAIC,WAAW,GAAGH,IAAI,CAACI,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAlB;AACAtC,IAAAA,eAAe,CAAEyC,gBAAD,IAAsB;AACpC,YAAMF,mBAAmB,GAAG,IAAItC,GAAJ,CAAQwC,gBAAR,CAA5B;;AACA,UAAIF,mBAAmB,CAACM,GAApB,CAAwBT,WAAW,CAACN,UAApC,CAAJ,EAAqD;AACnD,YAAIY,gBAAgB,GAAGH,mBAAmB,CAACI,GAApB,CAAwBP,WAAW,CAACN,UAApC,CAAvB;AACA,YAAIgB,eAAe,GAAGJ,gBAAgB,CAACK,MAAjB,CAAwBX,WAAxB,CAAtB;AACAG,QAAAA,mBAAmB,CAACK,GAApB,CAAwBR,WAAW,CAACN,UAApC,EAAgDgB,eAAhD;AACD,OAJD,MAIO;AACLP,QAAAA,mBAAmB,CAACK,GAApB,CAAwBR,WAAW,CAACN,UAApC,EAAgD,CAACM,WAAD,CAAhD;AACD;;AACD,aAAOG,mBAAP;AACD,KAVc,CAAf;AAWD,GAbD;;AAeA,QAAMS,iBAAiB,GAAG,MAAM;AAC9B,QAAI5C,GAAG,KAAK,UAAZ,EAAwB;AACtBT,MAAAA,SAAS,CAAC2B,WAAD,EAAcX,QAAd,EAAwBC,WAAxB,CAAT;AACD,KAFD,MAEO;AACLlB,MAAAA,gBAAgB,CAAC4B,WAAD,EAAcX,QAAd,EAAwBP,GAAxB,EAA6BJ,eAA7B,EAA8CY,WAA9C,CAAhB;AACD;AACF,GAND;;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,YADK;AAELC,MAAAA,eAFK;AAGLE,MAAAA,WAHK;AAILC,MAAAA,cAJK;AAKLC,MAAAA,GALK;AAMLC,MAAAA,MANK;AAOLC,MAAAA,WAPK;AAQLC,MAAAA,cARK;AASLE,MAAAA,gBATK;AAULC,MAAAA,mBAVK;AAWLC,MAAAA,QAXK;AAYLC,MAAAA,WAZK;AAaLK,MAAAA,gBAbK;AAcL+B,MAAAA;AAdK,KADT;AAAA,cAkBGlD;AAlBH;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAnHD;;GAAMD,Y;;KAAAA,Y;AAqHN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState, createContext } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport api_data from '../api/config';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport sendValue from '../utils/sendValue';\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\",\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const { URL, PORT } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    const stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, \"connected\": true });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":    \n        const updatedPrivateChats = new Map(privateChats);\n        \n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats((prevChats) => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n        break;        \n      case \"MESSAGE\":\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\n        break;\n    }\n  };\n  \n\n  const onPrivateMessage = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats((prevPrivateChats) => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n      return updatedPrivateChats;\n    });\n  };\n  \n  const handleSendMessage = () => {\n    if (tab === 'CHATROOM') {\n      sendValue(stompClient, userData, setUserData);\n    } else {\n      sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData);\n    }\n  };\n\n  return (\n    <ChatContext.Provider\n      value={{\n        privateChats,\n        setPrivateChats,\n        publicChats,\n        setPublicChats,\n        tab,\n        setTab,\n        friendInput,\n        setFriendInput,\n        addFriendTabOpen,\n        setAddFriendTabOpen,\n        userData,\n        setUserData,\n        connectWebSocket,\n        handleSendMessage,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatProvider;"]},"metadata":{},"sourceType":"module"}