{"ast":null,"code":"var _jsxFileName = \"/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport getAvatarColor from '../utils/getAvatarColor';\nimport RegisterForm from './RegisterForm';\nimport handleMessage from '../utils/handleMessage';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport api_data from '../api/config';\nimport sendValue from '../utils/sendValue';\nimport FriendSearch from './FriendSearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet stompClient;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\"\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const {\n      URL,\n      PORT\n    } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        const updatedPrivateChats = new Map(privateChats);\n\n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats(prevChats => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats(prevPrivateChats => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n\n      return updatedPrivateChats;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n              setAddFriendTabOpen(false);\n              scrollToBottom();\n            },\n            className: `member ${tab === \"CHATROOM\" && !addFriendTabOpen && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n              setAddFriendTabOpen(false);\n              scrollToBottom();\n            },\n            className: `member ${tab === name && !addFriendTabOpen && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `member  ${addFriendTabOpen && \"active\"}`,\n            onClick: () => setAddFriendTabOpen(true),\n            children: \"Adicionar amigo + \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), tab === \"CHATROOM\" && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the messageenter the message\",\n            value: userData.message,\n            onChange: event => handleMessage(event, userData, setUserData)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: () => sendValue(stompClient, userData, setUserData),\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), tab !== \"CHATROOM\" && !addFriendTabOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              style: {\n                backgroundColor: getAvatarColor(chat.senderName)\n              },\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: event => handleMessage(event, userData, setUserData)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: () => sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData),\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FriendSearch, {\n        addFriendTabOpen: addFriendTabOpen,\n        friendInput: friendInput,\n        setFriendInput: setFriendInput,\n        setPrivateChats: setPrivateChats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n      setUserData: setUserData,\n      userData: userData,\n      connectWebSocket: connectWebSocket,\n      setPublicChats: setPublicChats,\n      setPrivateChats: setPrivateChats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"3BC+Wndorx5PO7zWv27vR+hWiMc=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/jgomesh/WORKWORK/ChatApplication/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","onError","SockJS","scrollToBottom","getAvatarColor","RegisterForm","handleMessage","sendPrivateValue","api_data","sendValue","FriendSearch","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","friendInput","setFriendInput","friendName","addFriendTabOpen","setAddFriendTabOpen","userData","setUserData","username","receivername","connected","message","connectWebSocket","URL","PORT","socketURL","socket","connect","onConnected","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","updatedPrivateChats","prevChats","prevPrivateChats","existingMessages","get","set","has","updatedMessages","concat","keys","map","name","index","chat","backgroundColor","event"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport onError from '../utils/onError';\nimport SockJS from 'sockjs-client';\nimport scrollToBottom from '../utils/scrollToBottom';\nimport getAvatarColor from '../utils/getAvatarColor';\nimport RegisterForm from './RegisterForm';\nimport handleMessage from '../utils/handleMessage';\nimport sendPrivateValue from '../utils/sendPrivateValue';\nimport api_data from '../api/config';\nimport sendValue from '../utils/sendValue';\nimport FriendSearch from './FriendSearch';\n\nlet stompClient;\n\nconst ChatRoom = () => {\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [friendInput, setFriendInput] = useState({\n    friendName: \"\",\n  });\n  const [addFriendTabOpen, setAddFriendTabOpen] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [publicChats, privateChats, tab]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [userData]);\n\n  const connectWebSocket = () => {\n    const { URL, PORT } = api_data;\n    const socketURL = `http://${URL}:${PORT}/ws`;\n    const socket = new SockJS(socketURL);\n    stompClient = over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData, \"connected\": true });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    let chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":    \n        const updatedPrivateChats = new Map(privateChats);\n        \n        if (payloadData.senderName !== userData.username) {\n          setPrivateChats((prevChats) => {\n            const prevPrivateChats = new Map(prevChats);\n            const existingMessages = prevPrivateChats.get(payloadData.senderName) || [];\n            prevPrivateChats.set(payloadData.senderName, existingMessages);\n            return prevPrivateChats;\n          });\n        } else {\n          updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n        }\n        break;        \n      case \"MESSAGE\":\n        setPublicChats((prevChats) => [...prevChats, payloadData]);\n        break;\n    }\n  };\n  \n\n  const onPrivateMessage = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n    setPrivateChats((prevPrivateChats) => {\n      const updatedPrivateChats = new Map(prevPrivateChats);\n      if (updatedPrivateChats.has(payloadData.senderName)) {\n        let existingMessages = updatedPrivateChats.get(payloadData.senderName);\n        let updatedMessages = existingMessages.concat(payloadData);\n        updatedPrivateChats.set(payloadData.senderName, updatedMessages);\n      } else {\n        updatedPrivateChats.set(payloadData.senderName, [payloadData]);\n      }\n      return updatedPrivateChats;\n    });\n  };\n  \n  return (\n    <div>\n      {userData.connected ? (\n        <div className=\"chat-box\">\n          <div className=\"member-list\">\n            <ul>\n              <li onClick={() => {\n                setTab(\"CHATROOM\");\n                setAddFriendTabOpen(false);\n                scrollToBottom();\n                }} className={`member ${(tab === \"CHATROOM\" &&  !addFriendTabOpen) && \"active\"}`}>Chatroom</li>\n              {[...privateChats.keys()].map((name, index) => (\n                <li onClick={() => {\n                  setTab(name);\n                  setAddFriendTabOpen(false);\n                  scrollToBottom();\n                }} className={`member ${(tab === name &&  !addFriendTabOpen) && \"active\"}`} key={index}>{name}</li>\n              ))}\n              <li className={`member  ${(addFriendTabOpen) && \"active\"}`} onClick={() => setAddFriendTabOpen(true)}>Adicionar amigo + </li>\n            </ul>\n          </div>\n          {tab === \"CHATROOM\" && !addFriendTabOpen && (\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {publicChats.map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the messageenter the message\"\n                  value={userData.message}\n                  onChange={(event) => handleMessage(event, userData, setUserData)}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={() => sendValue(stompClient, userData, setUserData)}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n          {tab !== \"CHATROOM\" && !addFriendTabOpen&&(\n            <div className=\"chat-content\">\n              <ul className=\"chat-messages\">\n                {[...privateChats.get(tab)].map((chat, index) => (\n                  <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                    {chat.senderName !== userData.username && (\n                      <div\n                        className=\"avatar\"\n                        style={{ backgroundColor: getAvatarColor(chat.senderName) }}\n                      >\n                        {chat.senderName}\n                      </div>\n                    )}\n                    <div className=\"message-data\">{chat.message}</div>\n                    {chat.senderName === userData.username && (\n                      <div className=\"avatar self\">{chat.senderName}</div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"send-message\">\n                <input\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"enter the message\"\n                  value={userData.message}\n                  onChange={(event) => handleMessage(event, userData, setUserData)}\n                />\n                <button type=\"button\" className=\"send-button\" onClick={() => sendPrivateValue(stompClient, userData, tab, setPrivateChats, setUserData)}>\n                  send\n                </button>\n              </div>\n            </div>\n          )}\n          <FriendSearch\n            addFriendTabOpen={addFriendTabOpen}\n            friendInput={friendInput}\n            setFriendInput={setFriendInput}\n            setPrivateChats={setPrivateChats}\n          />\n        </div>\n      ) : (\n        <RegisterForm\n          setUserData={setUserData}\n          userData={userData}\n          connectWebSocket={connectWebSocket}\n          setPublicChats={setPublicChats}\n          setPrivateChats={setPrivateChats}\n          />\n      )}\n    </div>  \n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}